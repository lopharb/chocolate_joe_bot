from telebot import TeleBot
from telebot.types import Message

from .redis_db import RedisDB


class ChocolateJoe:
    def __init__(self, bot: TeleBot, llm, prompter, redis_db: RedisDB) -> None:
        self.bot = bot
        self.llm = llm
        self.prompter = prompter
        self.redis_db = redis_db
        self.mentions = [
            "üç´",
            "–¥–∂–æ",
            "—à–æ–∫–æ–ª–∞–¥–Ω—ã–π –¥–∂–æ",
            "chocolate joe",
            f"@{self.bot.user.username}",
        ]

        command_handlers = {
            "start": {"handler": self.start_command, "aliases": ["help"]},
            "togglepatchnotes": {"handler": self.toggle_patchnotes},
            "patchnote": {"handler": self.pathcnote},
        }
        for command, handler in command_handlers.items():
            command_list = [command] + handler.get("aliases", [])
            self.bot.message_handler(commands=command_list)(handler["handler"])
        self.bot.message_handler()(self.handle_message)

    def _needs_response(self, message: Message) -> bool:
        if message.text is None:
            return False

        if message.chat.type == "private":
            return True

        for mention in self.mentions:
            if mention in message.text.lower():
                return True

        if message.reply_to_message is not None:
            if message.reply_to_message.from_user.id == self.bot.user.id:
                return True

        return False

    def _display_patchnote(self, chat_id):
        self.bot.send_message(
            chat_id,
            "Sample text",
            parse_mode="Markdown",
        )

    def run_bot(self):
        self.bot.polling()

    def toggle_patchnotes(self, message: Message):
        current = self.redis_db.get(f"notify:{message.chat.id}")
        new = 0 if current == "1" else 1
        text = (
            "–ê—Ä–≥—Ö, –º–∞—Ç—Ä–æ—Å—ã! –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö –≤–∫–ª—é—á–µ–Ω—ã!"
            if new
            else "Apppp! –ù–∏–∫–∞–∫–∏—Ö –±–æ–ª—å—à–µ –ø–∞—Ç—á–Ω–æ—É—Ç–æ–≤!"
        )

        self.redis_db.set(f"notify:{message.chat.id}", new)

        self.bot.send_message(
            message.chat.id,
            text,
            reply_to_message_id=message.id,
            parse_mode="Markdown",
        )

    def start_command(self, message: Message):
        # TODO move outside
        PRIVATE_HELP_MESSAGE = """
Ahoy! –Ø –®–æ–∫–æ–ª–∞–¥–Ω—ã–π –î–∂–æ, —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–π, —á—Ç–æ —Ç–µ–±–µ –æ—Ç –º–µ–Ω—è –Ω—É–∂–Ω–æ?
        """.strip()
        GROUP_HELP_MESSAGE = """
        –≠–π, —è –®–æ–∫–æ–ª–∞–¥–Ω—ã–π –î–∂–æ! –Ø —Ç–æ–ª—å–∫–æ –≤–µ—Ä–Ω—É–ª—Å—è —Å –º–æ—Ä—è, –∞ –∑–¥–µ—Å—å —á–µ—Ä–µ—Å—á—É—Ä —à—É–º–Ω–æ, —Ç–∞–∫ —á—Ç–æ –∑–∞—Ö–æ—á–µ—à—å –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å ‚Äî –æ–±—Ä–∞—â–∞–π—Å—è *–ø–æ –∏–º–µ–Ω–∏* –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ *@–Ω–∞–º–µ–∫–Ω–∏*, —á—Ç–æ–±—ã —è –æ—Ç–≤–µ—Ç–∏–ª. *–û—Ç–≤–µ—Ç–∏—à—å* –Ω–∞ –º–æ–∏ —Å–ª–æ–≤–∞ ‚Äî —è —Ç–æ–∂–µ –≤ —Å—Ç–æ—Ä–æ–Ω–µ –Ω–µ –æ—Å—Ç–∞–Ω—É—Å—å.
–° –∫–µ–º –ø–æ–ø–∞–ª–æ —è —è–∑—ã–∫–æ–º —á–µ—Å–∞—Ç—å –Ω–µ –±—É–¥—É. –ó–∞—Ö–≤–∞—Ç–∏—à—å üç´ —à–æ–∫–æ–ª–∞–¥ ‚Äî —Ç–æ–≥–¥–∞ –¥—Ä—É–≥–æ–µ –¥–µ–ª–æ.
–ü–æ–Ω—è–ª? –ê —Ç–µ–ø–µ—Ä—å –ø—Ä–æ–≤–∞–ª–∏–≤–∞–π –∏ –¥–∞–π –º–Ω–µ –¥–æ–ø–∏—Ç—å —Å–≤–æ–µ –∫–∞–∫–∞–æ!

–ö–æ–º–∞–Ω–¥—ã, —á–µ—Ä—Ç –∏—Ö –≤–æ–∑—å–º–∏. –ß—Ç–æ–±—ã –º–Ω–µ, –®–æ–∫–æ–ª–∞–¥–Ω–æ–º—É –î–∂–æ...üîá:
- /start –∏–ª–∏ /help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
- /togglepatchnotes - –≤–∫–ª—é—á–∏—Ç—å –∏–ª–∏ –≤—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö –æ—Ç —Å–∞–º–æ–≥–æ –®–æ–∫–æ–ª–∞–¥–Ω–æ–≥–æ –î–∂–æ
- /patchnote - –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        """.strip()

        text = (
            PRIVATE_HELP_MESSAGE
            if message.chat.type == "private"
            else GROUP_HELP_MESSAGE
        )
        self.bot.send_message(message.chat.id, text, parse_mode="Markdown")

        previous_notif_setting = self.redis_db.get(f"notify:{message.chat.id}")
        if previous_notif_setting is None:
            self.redis_db.set(f"notify:{message.chat.id}", "1")

    def pathcnote(self, message: Message):
        chat_id = message.chat.id
        self._display_patchnote(chat_id)

    def notify(self):
        for key in self.redis_db.get_keys_by_root("notify"):
            chat_id = key.split(":")[1]
            config = self.redis_db.get(key)
            if config == "1":
                self._display_patchnote(chat_id)

    def handle_message(self, message: Message) -> str | None:
        # TODO figure out a better way
        try:
            if not self._needs_response(message):
                return
        except Exception:
            return

        assert message.from_user is not None
        assert message.text is not None

        username = message.from_user.first_name
        if message.from_user.last_name:
            username += f" {message.from_user.last_name}"

        prompt = self.prompter.get_context(message=message.text, username=username)
        response = self.llm.chat.completions.create(
            messages=prompt, model="openai/gpt-oss-120b"
        )
        response_text = response.choices[0].message.content
        if not response_text:
            response_text = "–†–µ—Å–ø–æ–Ω—Å–∞ –Ω–µ –±—É–¥–µ—Ç, –º."
        self.bot.send_message(
            message.chat.id,
            response_text,
            reply_to_message_id=message.id,
            parse_mode="Markdown",
        )
